#!/usr/bin/env bash

# USAGE:
#   header ffmpeg [arguments] <input>
#   header manifest [arguments] <input>
#
# EXAMPLE:
#   header ffmpeg video.mkv
#   header manifest --subtitles subs video.mkv
header() {
    local argument=$1
    shift

    local subtitles=""

    while [[ $1 == --* ]]; do
        case $1 in
            "--subtitles")
                if [[ $2 == --* ]]; then
                    echo "error: option \"$1\" expects subtitles name as argument"
                    return 1
                fi

                shift
                subtitles=$1
                shift
                ;;

            *)
                echo "error: unrecognized option \"$1\""
                exit 1
                ;;
        esac
    done

    local input=$1
    shift

    case $argument in
        "ffmpeg")
            echo ffmpeg -hide_banner -y -i $input
            ;;

        "manifest")
            echo -e "#EXTM3U\n#EXT-X-VERSION:3"

            if [ "$subtitles" != "" ]; then
                echo "#EXT-X-MEDIA:TYPE=SUBTITLES,GROUP-ID=\"$subtitles\",CHARACTERISTICS=\"public.accessibility.transcribes-spoken-dialog\",NAME=\"Transcription\",AUTOSELECT=YES,DEFAULT=NO,FORCED=NO,URI=\"subtitles.m3u8\""
            fi
            ;;

        *)
            return 1
            ;;
    esac

}

# USAGE:
#   params ffmpeg <output> <resolutions...>
#   params manifest [argument] <output> <resolutions...>
#
# EXAMPLE:
#   params ffmpeg 360p 480p 720p
#   params manifest 360p 480p 720p
#   params manifest --subtitles subs 360p 480p 720p
params() {
    local argument=$1
    shift

    local subtitles=""

    while [[ $1 == --* ]]; do
        case $1 in
            "--subtitles")
                if [[ $2 == --* ]]; then
                    echo "error: option \"$1\" expects subtitles name as argument"
                    return 1
                fi

                shift
                subtitles=$1
                shift
                ;;

            *)
                echo "error: unrecognized option \"$1\""
                exit 1
                ;;
        esac
    done

    local output=$1
    shift

    while [ $# -gt 0 ]; do

        case $1 in
            "360p")
                width="640"
                height="360"
                bitrate="800000"
                maxrate="856000"
                bufsize="1200000"
                audiorate="96000"
                ;;
            "480p")
                width="842"
                height="480"
                bitrate="1400000"
                maxrate="1498000"
                bufsize="2100000"
                audiorate="128000"
                ;;
            "720p")
                width="1280"
                height="720"
                bitrate="2800000"
                maxrate="2996000"
                bufsize="4200000"
                audiorate="128000"
                ;;
            "1080p")
                width="1920"
                height="1080"
                bitrate="5000000"
                maxrate="5350000"
                bufsize="7500000"
                audiorate="192000"
                ;;
            *)
                return 1
                ;;
        esac

        case $argument in
            "ffmpeg")
                echo -vf \
                    scale=w=$width:h=$height:force_original_aspect_ratio=decrease \
                    -c:a aac \
                    -ar 48000 \
                    -c:v h264 \
                    -profile:v main \
                    -crf 20 \
                    -sc_threshold 0 \
                    -g 48 \
                    -keyint_min 48 \
                    -hls_time 4 \
                    -hls_playlist_type vod \
                    -b:v $bitrate \
                    -maxrate $maxrate \
                    -bufsize $bufsize \
                    -b:a $audiorate \
                    -hls_segment_filename \
                    $output/${height}p_%03d.ts \
                    $output/${height}p.m3u8;;

            "manifest")
                if [ "$subtitles" == "" ]; then
                    echo -e "#EXT-X-STREAM-INF:BANDWIDTH=$bitrate,RESOLUTION=${width}x${height}\n${height}p.m3u8"
                else
                    echo -e "#EXT-X-STREAM-INF:BANDWIDTH=$bitrate,RESOLUTION=${width}x${height},SUBTITLES=\"subs\"\n${height}p.m3u8"
                fi
                ;;

            *)
                return 1
                ;;
        esac

        shift

    done

}

# USAGE:
#   subtitles-manifest <input> <subtitles>
#
# EXAMPLE:
#   subtitles-manifest video.mp4 subtitles.webvtt
subtitles-manifest() {
    local duration=$(ffprobe -loglevel quiet -of 'compact=nokey=1:print_section=0' -show_entries format=duration $1)
    local duration_int=$(($(echo $duration | cut -d '.' -f 1) + 1))

    echo "#EXTM3U"
    echo "#EXT-X-TARGETDURATION:$duration_int"
    echo "#EXT-X-VERSION:3"
    echo "#EXT-X-MEDIA-SEQUENCE:0"
    echo "#EXT-X-PLAYLIST-TYPE:VOD"
    echo "#EXTINF:$duration,"
    echo $2
    echo "#EXT-X-ENDLIST"
}

# USAGE:
#   miniatures <input> <output>
#
# EXAMPLE:
#   miniatures video.mkv video
miniatures() {
    local duration=$(ffprobe -loglevel quiet -of 'compact=nokey=1:print_section=0' -show_entries format=duration $1)
    local frames=$(echo 'scale=6;' $duration ' / 101' | bc)
    local middle=$(echo 'scale=6;' $duration ' / 2' | bc)
    ffmpeg -i $1 -vf scale=384:216,fps=1/$frames -vframes 101 -start_number 0 $2/miniature-%03d.png
    ffmpeg -i $1 -ss $middle -frames:v 1 -update true $2/poster.png
}

# USAGE:
#  format-vtt <input>
#
# EXAMPLE:
#  format-vtt 24290
format-vtt() {
    local millis=$(($1 % 1000))
    local total_seconds=$(($1 / 1000))
    local seconds=$(($total_seconds % 60))
    local minutes=$((($total_seconds / 60) % 60))
    local hours=$(($total_seconds / 3600))
    printf "%02g:%02g:%02g.%03g\n" $hours $minutes $seconds $millis
}

# USAGE:
#   miniatures-vtt <input> <output>
#
# EXAMPLE:
#   miniatures-vtt video.mkv miniatures.vtt
miniatures-vtt() {
    local duration_s=$(ffprobe -loglevel quiet -of 'compact=nokey=1:print_section=0' -show_entries format=duration $1)
    local duration=$(echo "$duration_s * 1000 / 1" | bc)
    local step=$((duration / 100))

    echo "WEBVTT\n" > $2

    for i in `seq 0 100`; do
        local from=$(($i * $step))
        local to=$((($i + 1) * $step))
        echo $(($i + 1)) >> $2
        echo $(format-vtt $from) "-->" $(format-vtt $to) >> $2
        echo "miniature-$(printf '%03g' $i).png" >> $2
        echo >> $2
    done
}

# USAGE:
#   encode [arguments] <input> <output> <resolutions...>
#
# EXAMPLE:
#   encode video.mkv video 360p 480p 720p
#   encode --subtitles subtitles.webvtt video.mkv video 360p 480p 720p
encode() {
    local subtitles=""

    while [[ $1 == --* ]]; do
        case $1 in
            "--subtitles")
                    if [[ $2 == --* ]]; then
                        echo "error: option \"$1\" expects subtitles file as argument"
                        exit 1
                    fi

                    shift
                    subtitles=$1
                    shift
                ;;

            *)
                echo "error: unrecognized option \"$1\""
                exit 1
                ;;
        esac
    done

    local input=$1
    shift

    local output=$1
    shift

    if [ -d $output ] || [ -f $output ]; then
        echo "error: output already exists"
        exit 1
    fi

    mkdir -p $output

    # Encode the video
    command=$(header ffmpeg $input && params ffmpeg $output $@)
    $command

    # Generate the manifest
    if [ $subtitles != "" ]; then
        header manifest --subtitles subs $input > $output/manifest.m3u8
        params manifest --subtitles subs $output $@ >> $output/manifest.m3u8
        subtitles-manifest $input $subtitles > $output/subtitles.m3u8
    else
        header manifest $input > $output/manifest.m3u8
        params manifest $output $@ >> $output/manifest.m3u8
    fi

    # Generate the miniatures
    miniatures $input $output
    # miniatures-vtt $input $output/miniatures.vtt
}


encode $@
